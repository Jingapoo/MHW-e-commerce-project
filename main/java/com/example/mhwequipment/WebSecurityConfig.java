package com.example.mhwequipment;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configurers.userdetails.DaoAuthenticationConfigurer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

import javax.sql.DataSource;

/**
 * Create a spring boot application with spring security module. Create a login page that shows the login name and password.
 * Customize your spring boot security configuration by extending the WebSecurityConfigurerAdapter class.
 * Issue: After providing the correct or incorrect login credential, it will be redirected to the same login page.
 * It will not allow you to proceed to the next page.
 */
@Configuration
@EnableWebSecurity
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    /**
     * Log in Form Authentication
     * Fields - username, password, role enabled
     */
    @Autowired
    private DataSource dataSource;

    @Autowired
    public void configAuthentication(AuthenticationManagerBuilder authBuilder) throws Exception {
        authBuilder.jdbcAuthentication()
                .dataSource(dataSource)
                .passwordEncoder(new BCryptPasswordEncoder())
                .usersByUsernameQuery("SELECT username, password, enabled FROM users where username=?")
                .authoritiesByUsernameQuery("SELECT username, role FROM users where username=?")
                ;
    }

//    @Bean
//    @Override
//    public UserDetailsService userDetailsService() {
//        return new CustomUserDetailsService();
//    }
//
//    @Bean
//    public BCryptPasswordEncoder passwordEncoder(){
//        /**
//         * Several algorithms have been developed especially for password hashing:
//         *     bcrypt,
//         *     scrypt,
//         *     PBKDF2,
//         *     argon2,
//         * All password encoders implement the interface PasswordEncoder.
//         */
//        return new BCryptPasswordEncoder();
//    }
//
//
//    @Bean
//    public DaoAuthenticationProvider authenticationProvider(){
//        /**
//         * An implementation of the AuthenticationProvider interface will use the UserDetailsService
//         * to perform the authentication logic. DaoAuthenticationProvider implementation specific targets data stored
//         * in database.
//         */
//        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
//        authProvider.setUserDetailsService(userDetailsService());
//        authProvider.setPasswordEncoder(passwordEncoder());
//
//        return authProvider;
//    }
//
//    @Override
//    protected void configure(AuthenticationManagerBuilder auth) throws Exception{
//
//        auth.authenticationProvider(authenticationProvider());
//    }


    /**
     * Here in the configure() method, a user must login to see the Palico page (URL /palico)
     * and other pages do not require authentication. We also configure the default login page
     * (generated by Spring Security) with the parameter name of the username field is email and
     * the default success URL is /palico – that means after successful login, the user will be
     * redirected to the palico page.
     * @param http
     * @throws Exception
     */
    @Override
    protected void configure(final HttpSecurity http) throws Exception{
        /**
         * To enable all the static resources for log in page
         */
        String[] staticResources = {
                "/bootstrap_5.0/**",
                "/css/**",
                "/js/**",
                "/scss/**",
                "/images/**",
        };
        http
                /**
                 * Below code creates rules that requires authentication for
                 * all endpoints except /palico and enables HTTP basic authentication.
                 * .antMatchers("/").permitAll() will show the home page
                 * but need click button to direct to log in page
                 */
                .csrf().disable()
                .authorizeRequests()
                .antMatchers("/").permitAll()
                .antMatchers("/register").permitAll()
                .antMatchers(staticResources).permitAll()
                /**
                 * Security Role-based Authorization
                 */
//                .antMatchers("/new").hasAuthority("ROLE_ADMIN")
//                .antMatchers("/delete/**").hasAuthority("ROLE_ADMIN")
//                .antMatchers("/edit/**").hasAuthority("ROLE_ADMIN")
                .anyRequest().authenticated()
                .and()
                /**
                 * With Spring Security come with JSP default login page formLogin()
                 * to specify any URL to act as a log in page using URL /login, need to be handled in Controller
                 * in order to match Controller so can direct to Custom log in page in templates
                 *
                 loginPage() – the custom login page
                 loginProcessingUrl() – the URL to submit the username and password to
                 defaultSuccessUrl() – the landing page after a successful login
                 failureUrl() – the landing page after an unsuccessful login
                 logoutUrl() – the custom logout

                 */
                .formLogin()
                    .loginPage("/login")
                    .usernameParameter("username")
                    .passwordParameter("pass")
                    .loginProcessingUrl("/doLogin")
                    .defaultSuccessUrl("/")
                    .permitAll()

//                    .loginProcessingUrl("/perform_login")
//                    .usernameParameter("email")
//                    .defaultSuccessUrl("/palico")
//                    .failureUrl("/login_error")

                .and()
                .logout()
                .logoutSuccessUrl("/login").permitAll()
                .and()
                .exceptionHandling().accessDeniedPage("/403")
                ;
    }


}
